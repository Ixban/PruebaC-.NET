//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DataLayer
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class pruebaEntities1 : DbContext
    {
        public pruebaEntities1()
            : base("name=pruebaEntities1")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<LíneasCelulares> LíneasCelulares { get; set; }
        public virtual DbSet<usuarios> usuarios { get; set; }
        public virtual DbSet<DetalleDeLlamadas> DetalleDeLlamadas { get; set; }
    
        public virtual ObjectResult<getDetallesDeLlamadas_Result> getDetallesDeLlamadas(string mobileLine, string descripcion)
        {
            var mobileLineParameter = mobileLine != null ?
                new ObjectParameter("MobileLine", mobileLine) :
                new ObjectParameter("MobileLine", typeof(string));
    
            var descripcionParameter = descripcion != null ?
                new ObjectParameter("Descripcion", descripcion) :
                new ObjectParameter("Descripcion", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getDetallesDeLlamadas_Result>("getDetallesDeLlamadas", mobileLineParameter, descripcionParameter);
        }
    
        public virtual ObjectResult<getLineasCelulares_Result> getLineasCelulares()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getLineasCelulares_Result>("getLineasCelulares");
        }
    
        public virtual ObjectResult<LoginUsuario_Result> LoginUsuario(string usuario)
        {
            var usuarioParameter = usuario != null ?
                new ObjectParameter("usuario", usuario) :
                new ObjectParameter("usuario", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<LoginUsuario_Result>("LoginUsuario", usuarioParameter);
        }
    
        public virtual ObjectResult<getUsuarios_Result> getUsuarios()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getUsuarios_Result>("getUsuarios");
        }
    
        public virtual int userDelete(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("userDelete", idParameter);
        }
    
        public virtual int UsuarioAdd(string nombres, string apellidoPaterno, string apellidoMaterno, string usuarioName, string email, string telefono)
        {
            var nombresParameter = nombres != null ?
                new ObjectParameter("Nombres", nombres) :
                new ObjectParameter("Nombres", typeof(string));
    
            var apellidoPaternoParameter = apellidoPaterno != null ?
                new ObjectParameter("ApellidoPaterno", apellidoPaterno) :
                new ObjectParameter("ApellidoPaterno", typeof(string));
    
            var apellidoMaternoParameter = apellidoMaterno != null ?
                new ObjectParameter("ApellidoMaterno", apellidoMaterno) :
                new ObjectParameter("ApellidoMaterno", typeof(string));
    
            var usuarioNameParameter = usuarioName != null ?
                new ObjectParameter("UsuarioName", usuarioName) :
                new ObjectParameter("UsuarioName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var telefonoParameter = telefono != null ?
                new ObjectParameter("Telefono", telefono) :
                new ObjectParameter("Telefono", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UsuarioAdd", nombresParameter, apellidoPaternoParameter, apellidoMaternoParameter, usuarioNameParameter, emailParameter, telefonoParameter);
        }
    
        public virtual ObjectResult<GetUsuarioId_Result> GetUsuarioId(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUsuarioId_Result>("GetUsuarioId", idParameter);
        }
    
        public virtual int UpdateUsuario(Nullable<int> idUsuario, string nombres, string apellidoPaterno, string apellidoMaterno, string usuarioName, string email, string telefono)
        {
            var idUsuarioParameter = idUsuario.HasValue ?
                new ObjectParameter("IdUsuario", idUsuario) :
                new ObjectParameter("IdUsuario", typeof(int));
    
            var nombresParameter = nombres != null ?
                new ObjectParameter("Nombres", nombres) :
                new ObjectParameter("Nombres", typeof(string));
    
            var apellidoPaternoParameter = apellidoPaterno != null ?
                new ObjectParameter("ApellidoPaterno", apellidoPaterno) :
                new ObjectParameter("ApellidoPaterno", typeof(string));
    
            var apellidoMaternoParameter = apellidoMaterno != null ?
                new ObjectParameter("ApellidoMaterno", apellidoMaterno) :
                new ObjectParameter("ApellidoMaterno", typeof(string));
    
            var usuarioNameParameter = usuarioName != null ?
                new ObjectParameter("UsuarioName", usuarioName) :
                new ObjectParameter("UsuarioName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var telefonoParameter = telefono != null ?
                new ObjectParameter("Telefono", telefono) :
                new ObjectParameter("Telefono", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateUsuario", idUsuarioParameter, nombresParameter, apellidoPaternoParameter, apellidoMaternoParameter, usuarioNameParameter, emailParameter, telefonoParameter);
        }
    }
}
